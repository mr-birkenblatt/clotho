from collections.abc import Generator
from typing import List, Set

from _typeshed import Incomplete


class DiGraph:
    def __init__(self) -> None: ...
    def add_node(self, n, **kwargs) -> None: ...
    def add_edge(self, u, v) -> None: ...
    def successors(self, n): ...
    def predecessors(self, n): ...
    @property
    def edges(self) -> Generator[Incomplete, None, None]: ...
    @property
    def nodes(self): ...
    def __iter__(self): ...
    def __contains__(self, n): ...
    def forward_transitive_closure(self, src: str) -> Set[str]: ...
    def backward_transitive_closure(self, src: str) -> Set[str]: ...
    def all_paths(self, src: str, dst: str): ...
    def first_path(self, dst: str) -> List[str]: ...
    def to_dot(self) -> str: ...
