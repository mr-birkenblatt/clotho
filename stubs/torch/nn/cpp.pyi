from _typeshed import Incomplete
from torch import nn as nn


class OrderedDictWrapper:
    cpp_module: Incomplete
    attr: Incomplete
    def __init__(self, cpp_module, attr) -> None: ...
    @property
    def cpp_dict(self): ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __contains__(self, key): ...
    def __getitem__(self, key): ...

class ModuleWrapper(nn.Module):
    cpp_module: Incomplete
    def __init__(self, cpp_module) -> None: ...
    @property
    def training(self): ...
    @training.setter
    def training(self, mode) -> None: ...
