# pylint: disable=multiple-statements,unused-argument,invalid-name
# pylint: disable=too-few-public-methods,useless-import-alias,unused-import
# pylint: disable=redefined-builtin,super-init-not-called,arguments-renamed
# pylint: disable=abstract-method,too-many-ancestors,import-error
# pylint: disable=relative-beyond-top-level,redefined-outer-name
# pylint: disable=arguments-differ,no-member,keyword-arg-before-vararg
# pylint: disable=signature-differs,blacklisted-name,c-extension-no-member
# pylint: disable=protected-access


from _typeshed import Incomplete
from torch.utils.data import communication as communication


class Protocol:
    request_queue: Incomplete
    response_queue: Incomplete
    def __init__(self, request_queue, response_queue) -> None: ...


class ProtocolClient(Protocol):
    request_queue: Incomplete
    response_queue: Incomplete
    def __init__(self, request_queue, response_queue) -> None: ...
    def can_take_request(self): ...
    def waiting_for_response(self): ...
    def request_sent(self, request: bool = ...) -> None: ...
    def request_served(self, result: Incomplete | None = ...) -> None: ...


class ProtocolServer(Protocol):
    request_queue: Incomplete
    response_queue: Incomplete
    def __init__(self, request_queue, response_queue) -> None: ...
    def have_pending_request(self): ...
    def get_new_request(self, block: bool = ...): ...
    def response_terminate(self) -> None: ...


class MapDataPipeQueueProtocolServer(ProtocolServer):
    def response_item(self, key, value) -> None: ...
    def response_len(self, size) -> None: ...
    def response_index_out_of_bound(self) -> None: ...


class MapDataPipeQueueProtocolClient(ProtocolClient):
    def request_len(self) -> None: ...
    def request_item(self, index) -> None: ...

    def get_response_len(
        self, block: bool = ..., timeout: Incomplete | None = ...): ...

    def get_response_item(
        self, block: bool = ..., timeout: Incomplete | None = ...): ...


class EmptyQueue(Exception):
    ...


class IterDataPipeQueueProtocolServer(ProtocolServer):
    def response_reset_iterator(self) -> None: ...
    def response_next(self, value) -> None: ...
    def response_stop_iteration(self) -> None: ...
    def response_invalid_state(self) -> None: ...


class IterDataPipeQueueProtocolClient(ProtocolClient):
    def request_reset_iterator(self) -> None: ...
    def request_next(self) -> None: ...
    def get_response_reset_iterator(self, block: bool = ...) -> None: ...

    def get_response_next(
        self, block: bool = ..., timeout: Incomplete | None = ...): ...
