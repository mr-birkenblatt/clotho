# pylint: disable=multiple-statements,unused-argument,invalid-name
# pylint: disable=too-few-public-methods,useless-import-alias,unused-import
# pylint: disable=redefined-builtin,super-init-not-called,arguments-renamed
# pylint: disable=abstract-method,too-many-ancestors,import-error
# pylint: disable=relative-beyond-top-level,redefined-outer-name
# pylint: disable=arguments-differ,no-member,keyword-arg-before-vararg
# pylint: disable=signature-differs,blacklisted-name,c-extension-no-member
# pylint: disable=protected-access


from collections.abc import Generator
from typing import List, Set

from _typeshed import Incomplete


class DiGraph:
    def __init__(self) -> None: ...
    def add_node(self, n, **kwargs) -> None: ...
    def add_edge(self, u, v) -> None: ...
    def successors(self, n): ...
    def predecessors(self, n): ...
    @property
    def edges(self) -> Generator[Incomplete, None, None]: ...
    @property
    def nodes(self): ...
    def __iter__(self): ...
    def __contains__(self, n): ...
    def forward_transitive_closure(self, src: str) -> Set[str]: ...
    def backward_transitive_closure(self, src: str) -> Set[str]: ...
    def all_paths(self, src: str, dst: str): ...
    def first_path(self, dst: str) -> List[str]: ...
    def to_dot(self) -> str: ...
