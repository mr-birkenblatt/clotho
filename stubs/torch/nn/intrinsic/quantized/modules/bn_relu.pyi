import torch.nn.quantized as nnq
from _typeshed import Incomplete


class BNReLU2d(nnq.BatchNorm2d):
    def __init__(self, num_features, eps: float = ..., momentum: float = ..., device: Incomplete | None = ..., dtype: Incomplete | None = ...) -> None: ...
    def forward(self, input): ...
    @classmethod
    def from_float(cls, mod): ...
    @classmethod
    def from_reference(cls, bn_relu, output_scale, output_zero_point): ...

class BNReLU3d(nnq.BatchNorm3d):
    def __init__(self, num_features, eps: float = ..., momentum: float = ..., device: Incomplete | None = ..., dtype: Incomplete | None = ...) -> None: ...
    def forward(self, input): ...
    @classmethod
    def from_float(cls, mod): ...
    @classmethod
    def from_reference(cls, bn_relu, output_scale, output_zero_point): ...
