from typing import Any, Dict, List, NamedTuple, Optional, Tuple

import torch
from torch.fx._compatibility import compatibility as compatibility
from torch.fx.graph import Graph as Graph
from torch.fx.graph_module import GraphModule as GraphModule
from torch.fx.node import Argument as Argument
from torch.fx.node import map_aggregate as map_aggregate
from torch.fx.node import map_arg as map_arg
from torch.fx.node import Node as Node
from torch.fx.node import Target as Target
from torch.fx.passes.param_fetch import (
    lift_lowering_attrs_to_nodes as lift_lowering_attrs_to_nodes,
)
from torch.fx.passes.shape_prop import ShapeProp as ShapeProp


def replace_target_nodes_with(fx_module: GraphModule, old_op: str, old_target: Target, new_op: str, new_target: Target): ...

class size_bytes(NamedTuple):
    output_size: int
    total_size: int

def get_size_of_all_nodes(fx_module: GraphModule, args: Optional[List[torch.Tensor]] = ...) -> None: ...
def get_tensor_meta(node: Node) -> Any: ...
def get_size_of_node(fx_module: GraphModule, node: Node) -> size_bytes: ...
def serialize_shape(shape: torch.Size) -> str: ...
def serialize_stride(stride: Tuple[int]) -> str: ...
def serialize_tensor_quantization(tensor: torch.Tensor, weights: Dict, pcq_prefix: str) -> Tuple[Dict, Dict]: ...
def serialize_weight(tensor: torch.Tensor, weights: Dict, name: str) -> Dict: ...
def serialize_leaf_module(node: Node, weights_metadata: Dict, weights: Dict, name_prefix: str) -> Dict: ...
def serialize_module(fx_module: GraphModule, weights: Dict, name_prefix: str = ...) -> Dict: ...
