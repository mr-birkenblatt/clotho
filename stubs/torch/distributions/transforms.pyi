# pylint: disable=multiple-statements,unused-argument,invalid-name
# pylint: disable=too-few-public-methods,useless-import-alias,unused-import
# pylint: disable=redefined-builtin,super-init-not-called,arguments-renamed
# pylint: disable=abstract-method,too-many-ancestors,import-error
# pylint: disable=relative-beyond-top-level,redefined-outer-name
# pylint: disable=arguments-differ,no-member,keyword-arg-before-vararg
# pylint: disable=signature-differs,blacklisted-name,c-extension-no-member
# pylint: disable=protected-access


from typing import List

from _typeshed import Incomplete
from torch.distributions import constraints


class Transform:
    bijective: bool
    domain: constraints.Constraint
    codomain: constraints.Constraint
    def __init__(self, cache_size: int = ...) -> None: ...
    @property
    def event_dim(self): ...
    @property
    def inv(self): ...
    @property
    def sign(self) -> None: ...
    def with_cache(self, cache_size: int = ...): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __call__(self, x): ...
    def log_abs_det_jacobian(self, x, y) -> None: ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class _InverseTransform(Transform):
    def __init__(self, transform: Transform) -> None: ...
    def domain(self): ...
    def codomain(self): ...
    @property
    def bijective(self): ...
    @property
    def sign(self): ...
    @property
    def inv(self): ...
    def with_cache(self, cache_size: int = ...): ...
    def __eq__(self, other): ...
    def __call__(self, x): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class ComposeTransform(Transform):
    parts: Incomplete

    def __init__(
        self, parts: List[Transform], cache_size: int = ...) -> None: ...

    def __eq__(self, other): ...
    def domain(self): ...
    def codomain(self): ...
    def bijective(self): ...
    def sign(self): ...
    @property
    def inv(self): ...
    def with_cache(self, cache_size: int = ...): ...
    def __call__(self, x): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


identity_transform: Incomplete


class IndependentTransform(Transform):
    base_transform: Incomplete
    reinterpreted_batch_ndims: Incomplete

    def __init__(
        self, base_transform, reinterpreted_batch_ndims,
        cache_size: int = ...) -> None: ...

    def with_cache(self, cache_size: int = ...): ...
    def domain(self): ...
    def codomain(self): ...
    @property
    def bijective(self): ...
    @property
    def sign(self): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class ReshapeTransform(Transform):
    bijective: bool
    in_shape: Incomplete
    out_shape: Incomplete
    def __init__(self, in_shape, out_shape, cache_size: int = ...) -> None: ...
    def domain(self): ...
    def codomain(self): ...
    def with_cache(self, cache_size: int = ...): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class ExpTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool
    sign: int
    def __eq__(self, other): ...
    def log_abs_det_jacobian(self, x, y): ...


class PowerTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool
    sign: int
    def __init__(self, exponent, cache_size: int = ...) -> None: ...
    def with_cache(self, cache_size: int = ...): ...
    def __eq__(self, other): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class SigmoidTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool
    sign: int
    def __eq__(self, other): ...
    def log_abs_det_jacobian(self, x, y): ...


class SoftplusTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool
    sign: int
    def __eq__(self, other): ...
    def log_abs_det_jacobian(self, x, y): ...


class TanhTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool
    sign: int
    def __eq__(self, other): ...
    def log_abs_det_jacobian(self, x, y): ...


class AbsTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    def __eq__(self, other): ...


class AffineTransform(Transform):
    bijective: bool
    loc: Incomplete
    scale: Incomplete

    def __init__(
        self, loc, scale, event_dim: int = ...,
        cache_size: int = ...) -> None: ...

    @property
    def event_dim(self): ...
    def domain(self): ...
    def codomain(self): ...
    def with_cache(self, cache_size: int = ...): ...
    def __eq__(self, other): ...
    @property
    def sign(self): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class CorrCholeskyTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool

    def log_abs_det_jacobian(
        self, x, y, intermediates: Incomplete | None = ...): ...

    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class SoftmaxTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    def __eq__(self, other): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class StickBreakingTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    bijective: bool
    def __eq__(self, other): ...
    def log_abs_det_jacobian(self, x, y): ...
    def forward_shape(self, shape): ...
    def inverse_shape(self, shape): ...


class LowerCholeskyTransform(Transform):
    domain: Incomplete
    codomain: Incomplete
    def __eq__(self, other): ...


class CatTransform(Transform):
    transforms: List[Transform]
    lengths: Incomplete
    dim: Incomplete

    def __init__(
        self, tseq, dim: int = ..., lengths: Incomplete | None = ...,
        cache_size: int = ...) -> None: ...

    def event_dim(self): ...
    def length(self): ...
    def with_cache(self, cache_size: int = ...): ...
    def log_abs_det_jacobian(self, x, y): ...
    @property
    def bijective(self): ...
    def domain(self): ...
    def codomain(self): ...


class StackTransform(Transform):
    transforms: List[Transform]
    dim: Incomplete

    def __init__(
        self, tseq, dim: int = ..., cache_size: int = ...) -> None: ...

    def with_cache(self, cache_size: int = ...): ...
    def log_abs_det_jacobian(self, x, y): ...
    @property
    def bijective(self): ...
    def domain(self): ...
    def codomain(self): ...


class CumulativeDistributionTransform(Transform):
    bijective: bool
    codomain: Incomplete
    sign: int
    distribution: Incomplete
    def __init__(self, distribution, cache_size: int = ...) -> None: ...
    @property
    def domain(self): ...
    def log_abs_det_jacobian(self, x, y): ...
    def with_cache(self, cache_size: int = ...): ...
