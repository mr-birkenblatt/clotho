from typing import Optional, Tuple

from _typeshed import Incomplete
from torch import Tensor as Tensor


def is_sparse(A): ...
def get_floating_dtype(A): ...
def matmul(A: Optional[Tensor], B: Tensor) -> Tensor: ...
def conjugate(A): ...
def transpose(A): ...
def transjugate(A): ...
def bform(X: Tensor, A: Optional[Tensor], Y: Tensor) -> Tensor: ...
def qform(A: Optional[Tensor], S: Tensor): ...
def basis(A): ...
def symeig(A: Tensor, largest: Optional[bool] = ...) -> Tuple[Tensor, Tensor]: ...
def solve(input: Tensor, A: Tensor, *, out: Incomplete | None = ...) -> Tuple[Tensor, Tensor]: ...
