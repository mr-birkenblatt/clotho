# pylint: disable=import-error,relative-beyond-top-level,unused-import
# pylint: disable=useless-import-alias,multiple-statements,no-name-in-module
# pylint: disable=unused-argument,invalid-name
from typing import Any, Dict, Generator, List, Optional, Union

import praw
from _typeshed import Incomplete

from ...const import API_PATH as API_PATH
from ...util.cache import cachedproperty as cachedproperty
from ..listing.mixins import RedditorListingMixin as RedditorListingMixin
from ..util import stream_generator as stream_generator
from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin
from .mixins import MessageableMixin as MessageableMixin

class Redditor(
        MessageableMixin, RedditorListingMixin, FullnameMixin, RedditBase):
    STR_FIELD: str
    @classmethod
    def from_data(cls, reddit: Any, data: Any) -> None: ...
    def notes(self) -> praw.models.RedditorModNotes: ...
    def stream(self) -> praw.models.reddit.redditor.RedditorStream: ...
    name: Incomplete

    def __init__(
        self, reddit: praw.Reddit, name: Optional[str] = ...,
        fullname: Optional[str] = ...,
        _data: Optional[Dict[str, Any]] = ...) -> None: ...

    def __setattr__(self, name: str, value: Any) -> None: ...
    def block(self) -> None: ...
    def distrust(self) -> None: ...
    def friend(self, *, note: str = ...) -> None: ...
    def friend_info(self) -> praw.models.Redditor: ...
    def gild(self, *, months: int = ...) -> None: ...
    def moderated(self) -> List['praw.models.Subreddit']: ...
    def multireddits(self) -> List['praw.models.Multireddit']: ...
    def trophies(self) -> List['praw.models.Trophy']: ...
    def trust(self) -> None: ...
    def unblock(self) -> None: ...
    def unfriend(self) -> None: ...


class RedditorStream:
    redditor: Incomplete
    def __init__(self, redditor: praw.models.Redditor) -> None: ...

    def comments(
        self, **stream_options: Union[str, int, Dict[str, str]]) -> Generator[
            'praw.models.Comment', None, None]: ...

    def submissions(
        self, **stream_options: Union[str, int, Dict[str, str]],
        ) -> Generator['praw.models.Submission', None, None]: ...
